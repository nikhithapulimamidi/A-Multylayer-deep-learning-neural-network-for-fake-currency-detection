import cv2
import matplotlib.pyplot as plt
import numpy as np
from skimage.io import imread
from skimage.color import rgb2hsv, rgb2gray
from skimage.morphology import closing, square, rectangle, remove_small_objects
from skimage.measure import label
from skimage import exposure
import os

print("Libraries imported successfully.")

# Define image paths
image_path_real = "C:\\Users\\DELL\\OneDrive\\Desktop\\realnote2\\real20_1.jpg"
image_path_fake = "C:\\Users\\DELL\\OneDrive\\Desktop\\fakenotes2\\fake20_1.jpg"

# Check if paths are correct and files exist
print(f"Checking if image files exist at the specified paths...\nReal image path: {image_path_real}\nFake image path: {image_path_fake}")
if not os.path.exists(image_path_real):
    raise FileNotFoundError(f"Real image file not found at path: {image_path_real}")
if not os.path.exists(image_path_fake):
    raise FileNotFoundError(f"Fake image file not found at path: {image_path_fake}")

# Load images
print("Loading images...")
A = cv2.imread(image_path_real)
P = cv2.imread(image_path_fake)

# Check if images are loaded
if A is None:
    raise ValueError("Error loading real image. Check the file path and format.")
if P is None:
    raise ValueError("Error loading fake image. Check the file path and format.")
print("Images loaded successfully.")

# Display images
plt.imshow(cv2.cvtColor(A, cv2.COLOR_BGR2RGB))
plt.title('Real Image')
plt.show()

plt.imshow(cv2.cvtColor(P, cv2.COLOR_BGR2RGB))
plt.title('Fake Image')
plt.show()

# Convert images to grayscale
print("Converting images to grayscale...")
a = cv2.cvtColor(A, cv2.COLOR_BGR2GRAY)
p = cv2.cvtColor(P, cv2.COLOR_BGR2GRAY)

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(a, cmap='gray')
plt.title('Grayscale Real Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(p, cmap='gray')
plt.title('Grayscale Fake Image')
plt.axis('off')
plt.show()

# Print shapes of grayscale images for debugging
print(f"Shape of grayscale real image: {a.shape}")
print(f"Shape of grayscale fake image: {p.shape}")

# Extract regions of interest
print("Extracting regions of interest...")
a2tr = a[200:1000, 700:1247]
b2tr = p[200:1000, 700:1247]

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(a2tr, cmap='gray')
plt.title('Region of Interest - Real')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(b2tr, cmap='gray')
plt.title('Region of Interest - Fake')
plt.axis('off')
plt.show()

# Check extracted regions
if a2tr.size == 0 or b2tr.size == 0:
    raise ValueError("Error: Extracted regions a2tr or b2tr are empty.")
else:
    print("Regions a2tr and b2tr extracted successfully.")

# Alternative coordinates for the second set of regions
print("Extracting alternative regions...")
a2_str = a[100:800, 1000:1150]
p2_str = p[100:800, 1000:1150]

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(a2_str, cmap='gray')
plt.title('Alternative Region - Real')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(p2_str, cmap='gray')
plt.title('Alternative Region - Fake')
plt.axis('off')
plt.show()

# Verify that extracted regions are valid
if a2_str.size == 0 or p2_str.size == 0:
    raise ValueError("Error: Extracted regions a2_str or p2_str are empty.")
else:
    print("Regions a2_str and p2_str extracted successfully.")

# Convert images to HSV
print("Converting images to HSV...")
hsvImageReal = cv2.cvtColor(A, cv2.COLOR_BGR2HSV)
hsvImageFake = cv2.cvtColor(P, cv2.COLOR_BGR2HSV)

print("Images converted to HSV successfully.")

# Crop the HSV images
print("Cropping HSV images...")
croppedImageReal = hsvImageReal[100:800, 1000:1150]
croppedImageFake = hsvImageFake[100:800, 1000:1150]

print("Images cropped successfully.")

# Threshold for saturation and value
print("Creating binary masks based on saturation and value thresholds...")
satThresh = 0.3
valThresh = 0.9

# Create binary masks based on thresholds
g = croppedImageReal[:,:,1] > satThresh
h = croppedImageReal[:,:,2] < valThresh
g1 = croppedImageFake[:,:,1] > satThresh
h1 = croppedImageFake[:,:,2] < valThresh

BWImageReal = g & h
BWImageFake = g1 & h1

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(BWImageReal, cmap='gray')
plt.title('Binary Mask - Real')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(BWImageFake, cmap='gray')
plt.title('Binary Mask - Fake')
plt.axis('off')
plt.show()

print("Binary masks created successfully.")

# Function to remove small objects
def bwareaopen(img, min_size, connectivity=8):
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(img.astype(np.uint8), connectivity=connectivity)
    for i in range(num_labels):
        label_size = stats[i, cv2.CC_STAT_AREA]
        if label_size < min_size:
            img[labels == i] = 0
    return img

# Binary thresholding and morphology
print("Applying binary thresholding and morphological operations...")
binr = cv2.threshold(a2_str, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
kernel = np.ones((3, 3), np.uint8)
invert = cv2.bitwise_not(binr)
BWImageCloseReal = cv2.morphologyEx(invert, cv2.MORPH_GRADIENT, kernel)

binr2 = cv2.threshold(p2_str, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
if binr2 is not None and binr2.size > 0:
    kernel2 = np.ones((3, 3), np.uint8)
    invert2 = cv2.bitwise_not(binr2)
    BWImageCloseFake = cv2.morphologyEx(invert2, cv2.MORPH_GRADIENT, kernel2)
else:
    raise ValueError("Error: Binary thresholding of p2_str failed or resulted in an empty image.")

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(BWImageCloseReal, cmap='gray')
plt.title('Morphological Operations - Real')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(BWImageCloseFake, cmap='gray')
plt.title('Morphological Operations - Fake')
plt.axis('off')
plt.show()

# Debug prints
print(f"Shape of BWImageCloseReal: {BWImageCloseReal.shape}")
print(f"Shape of BWImageCloseFake: {BWImageCloseFake.shape}")
print(f"Unique values in BWImageCloseReal: {np.unique(BWImageCloseReal)}")
print(f"Unique values in BWImageCloseFake: {np.unique(BWImageCloseFake)}")

print("Morphological operations completed successfully.")

# Remove small objects
print("Removing small objects...")
areaopenReal = bwareaopen(BWImageCloseReal, 15)
areaopenFake = bwareaopen(BWImageCloseFake, 15)

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(areaopenReal, cmap='gray')
plt.title('Area Opened Image - Real')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(areaopenFake, cmap='gray')
plt.title('Area Opened Image - Fake')
plt.axis('off')
plt.show()

print("Small objects removed successfully.")

# Count connected components
print("Counting connected components...")
labels = np.zeros(areaopenReal.shape, dtype=np.int32)
countReal = cv2.connectedComponentsWithStats(areaopenReal.astype(np.uint8), labels, 8)
labels2 = np.zeros(areaopenFake.shape, dtype=np.int32)
countFake = cv2.connectedComponentsWithStats(areaopenFake.astype(np.uint8), labels2, 8)

print(f"Connected components in real image: {countReal[0]}")
print(f"Connected components in fake image: {countFake[0]}")

# Function to calculate correlation coefficient
def corr2(A, B):
    A_mA = A - A.mean(1)[:, None]
    B_mB = B - B.mean(1)[:, None]
    ssA = (A_mA**2).sum(1)
    ssB = (B_mB**2).sum(1)
    return np.dot(A_mA, B_mB.T) / np.sqrt(np.dot(ssA[:, None], ssB[None]))

# Calculate correlation
print("Calculating correlation coefficient...")
co = corr2(a2tr, b2tr)

print("Correlation coefficient calculated successfully.")

# Calculate accuracy based on correlation and connected components
print("Calculating accuracy...")
correlation_threshold = 0.5
component_match = (countReal[0] == countFake[0])
correlation_match = co.any() >= correlation_threshold

accuracy = 0
if component_match and correlation_match:
    accuracy = 1.0
elif not component_match and not correlation_match:
    accuracy = 0.0
else:
    accuracy = 0.5

print(f"Accuracy: {accuracy}")

# Display final results
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(a2tr, cmap='gray')
plt.title('Real Image ROI')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(b2tr, cmap='gray')
plt.title('Fake Image ROI')
plt.axis('off')
plt.show()

print(f"Connected components in real image: {countReal[0]}")
print(f"Connected components in fake image: {countFake[0]}")

print("Correlation coefficient between real and fake images: ", co.any())

# Determine if the currency is legitimate or fake based on correlation and component count
if co.any() >= correlation_threshold and countReal[0] == countFake[0]:
    print("Currency is legitimate.")
else:
    print("Currency is fake.")

print("Execution completed.")
